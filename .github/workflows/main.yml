name: Main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-yrs:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    steps:
      - name: checkout sources
        uses: actions/checkout@v2

      - name: install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: build default
        run: cargo build --verbose --release -p yrs -p yffi

  test-yrs:
    runs-on: ${{ matrix.os }}
    needs: build-yrs
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
    steps:
      - name: checkout sources
        uses: actions/checkout@v2

      - name: install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: build default
        run: cargo test --release --all-features -p yrs -p yffi

  wasm:
    runs-on: ubuntu-latest
    needs: build-yrs
    steps:
      - name: checkout sources
        uses: actions/checkout@v2

      - name: install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: install nodejs
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: 'latest'

      - name: build wasm
        run: wasm-pack build --release --target nodejs ./ywasm

      - name: test web assembly
        run: cd ./tests-wasm && npm i && npm test

  c-ffi:
    runs-on: ubuntu-latest
    needs: build-yrs
    steps:
      - name: checkout sources
        uses: actions/checkout@v2

      - name: install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: install cbindgen
        run: cargo install cbindgen

      - name: generate C bindings
        run: cbindgen --config ./yffi/cbindgen.toml --crate yffi --output ./tests-ffi/include/libyrs.h --lang C

      - name: install cmake
        uses: lukka/get-cmake@latest

      - name: build libyrs
        run: cargo build -p yffi

      - name: generate Makefile
        run: mkdir ./tests-ffi/cmake-build-debug && cd ./tests-ffi && cmake -DCMAKE_BUILD_TYPE=Debug .

      - name: build c-ffi test project
        run: cd ./tests-ffi && make all

      - name: run tests
        run: ./tests-ffi/yrs-ffi-tests
